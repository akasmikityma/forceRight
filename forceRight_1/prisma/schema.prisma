// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model User{
  id Int  @id @default(autoincrement()) @unique
  name String?
  age Int?
  email String @unique
  password String
  Problems Problem[]
  Libraries Library[] 
  createdAt DateTime @default(now())
}

model Library{
  id Int     @id @default(autoincrement())
  name String
  user User  @relation(fields: [userId],references: [id])
  userId Int
  problems LibraryProblem[]
}

model Problem {
  id                 Int      @id @default(autoincrement())
  problemLink        String   @unique
  initialThoughts    String
  logic              String[]
  implementations    String[]
  logicGap           String?
  implementationGap  String?
  solution           String
  tags               String[]
  difficulty         DifficultyStatus @default(EASY)  // âœ… Corrected (No `?`, since it has a default)
  timeTakenMinutes   Int?
  status             Solstatus @default(PENDING)
  rating             Rating @default(ONE)
  libraries          LibraryProblem[]
  user               User     @relation(fields: [userId], references: [id])
  userId             Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model LibraryProblem {
  libraryId Int
  problemId Int

  library   Library @relation(fields: [libraryId], references: [id])
  problem   Problem @relation(fields: [problemId], references: [id])

  @@id([libraryId, problemId]) // Composite primary key
}

enum DifficultyStatus {
  EASY
  MEDIUM
  HARD
}

enum Rating {
  ONE
  TWO
  THREE 
  FOUR
  FIVE
}
enum Solstatus {
  PENDING
  IN_PROGRESS
  SOLVED
}



// model User {
//   id        Int      @id @default(autoincrement())
//   name      String?
//   dateOfBirth DateTime? // Instead of age, store DoB for better analytics
//   email     String   @unique
//   password  String
//   Problems  Problem[]
//   streak    Int      @default(0) // Track daily solving streaks
//   createdAt DateTime @default(now())
// }

// model Problem {
//   id                Int      @id @default(autoincrement())
//   problemLink       String   @unique
//   initialThoughts   String
//   logic             String[]
//   implementations   String[]
//   logicGap          String?
//   implementationGap String?
//   solution          String
//   status            Solstatus @default(PENDING)
//   rating            Rating    @default(ONE)
//   user              User      @relation(fields: [userId], references: [id])
//   userId            Int
//   tags             String[]  // Example: ["DP", "Graph", "Binary Search"]
//   difficulty       String?   // "Easy", "Medium", "Hard"
//   timeTakenMinutes Int?      // Track how long the user took to solve the problem
//   createdAt        DateTime  @default(now())
//   updatedAt        DateTime  @updatedAt
// }

// enum Rating {
//   ONE
//   TWO
//   THREE 
//   FOUR
//   FIVE
// }

// enum Solstatus {
//   PENDING
//   IN_PROGRESS
//   SOLVED
// }
